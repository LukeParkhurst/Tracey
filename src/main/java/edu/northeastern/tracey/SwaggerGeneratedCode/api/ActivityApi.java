/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package edu.northeastern.tracey.SwaggerGeneratedCode.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import edu.northeastern.tracey.model.WorkoutActivity;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;
import java.util.List;
import java.util.Optional;

@Api(value = "activity", description = "the activity API")
public interface ActivityApi {

    Logger log = LoggerFactory.getLogger(ActivityApi.class);

    default Optional<ObjectMapper> getObjectMapper() { return Optional.empty(); }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }


    @ApiOperation(value = "Get all activities.", nickname = "getAllActivityRecords", notes = "", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Activities - Get collection - success"),
        @ApiResponse(code = 400, message = "Activities - Get collection - failed") })
    @RequestMapping(value = "/activity",
        method = RequestMethod.GET)
    default ResponseEntity<Void> getAllActivityRecords() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ActivitiesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get a specific activity by seraching its Id", nickname = "getSingleActivityById", notes = "", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "ActivityById - Get activity by its Id - success"),
        @ApiResponse(code = 400, message = "ActivityById - Get activity by its Id - failed") })
    @RequestMapping(value = "/activity/{activityId}",
        method = RequestMethod.GET)
    default ResponseEntity<Void> getSingleActivityById(@ApiParam(value = "String ID of the activity to get",required=true) @PathVariable("activityId") String activityId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ActivitiesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Modify a specific activity by searching its Id", nickname = "patchSingleActivityById", notes = "", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "ActivityById - Patch activity by its Id - success"),
        @ApiResponse(code = 400, message = "ActivityById - Patch activity by its Id - failed") })
    @RequestMapping(value = "/activity/{activityId}",
        method = RequestMethod.PATCH)
    default ResponseEntity<Void> patchSingleActivityById(@ApiParam(value = "String ID of the activity to patch",required=true) @PathVariable("activityId") String activityId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ActivitiesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Add an activity", nickname = "postActivityToRecord", notes = "", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Activities - Post collection - success"),
        @ApiResponse(code = 400, message = "Activities - Post collection - failed") })
    @RequestMapping(value = "/activity",
        method = RequestMethod.POST)
    default ResponseEntity<WorkoutActivity> postActivityToRecord(@RequestBody WorkoutActivity activity) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ActivitiesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Modify a specific activity by searching its Id", nickname = "putSingleActivityById", notes = "", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "ActivityById - Put activity by its Id - success"),
        @ApiResponse(code = 400, message = "ActivityById - Put activity by its Id - failed") })
    @RequestMapping(value = "/activity/{activityId}",
        method = RequestMethod.PUT)
    default ResponseEntity<Void> putSingleActivityById(@ApiParam(value = "String ID of the activity to put",required=true) @PathVariable("activityId") String activityId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ActivitiesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    @ApiOperation(value = "Search for activities by date", nickname = "getActivitiesByDate", notes = "", tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "startTime - Get activity by date - success"),
            @ApiResponse(code = 400, message = "startTime - Get activity by date - failed") })
    @RequestMapping(value = "/activity/date/{startTime}",
            method = RequestMethod.GET)
    default ResponseEntity<List<WorkoutActivity>> getActivityByStartTime(@ApiParam(value = "String date of the activity",required=true) @PathVariable("startTime") String startTime) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ActivitiesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
}
