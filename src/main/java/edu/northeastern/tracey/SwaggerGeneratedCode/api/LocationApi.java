/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package edu.northeastern.tracey.SwaggerGeneratedCode.api;

import com.fasterxml.jackson.databind.ObjectMapper;

import edu.northeastern.tracey.model.Location;
import edu.northeastern.tracey.model.WorkoutActivity;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;

import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * This interface represents the location API. It contains
 * methods that allows the client to do CRUD operations to the collection.
 */
@Api(value = "location", description = "the location API")
public interface LocationApi {

    Logger log = LoggerFactory.getLogger(LocationApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    /**
     * POST method that adds a new location from the request body
     * and saves it to the pointOfInterest collection.
     *
     * Request URI: /location
     * @param location - a given location from the request body
     * @return the new location object and a 201 status code if successful, 400 code otherwise
     */
    @ApiOperation(value = "Create a location", nickname = "createLocationRecord", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Locations - Post new location - success"),
        @ApiResponse(code = 400, message = "Locations - Post new location - failed") })
    @RequestMapping(value = "/location",
        method = RequestMethod.POST)
    default ResponseEntity<Location> createLocationRecord(@RequestBody Location location) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default LocationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * DELETE a specific location by searching through the
     * collection with the given ID.
     *
     * Request URI: /location/{locationId}
     * @param locationId - location ID to delete
     * @return the deleted location document and 200 status code if success, 400 code otherwise
     */
    @ApiOperation(value = "Delete a specific location by searching its locationId", nickname = "deleteSingleLocation", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "byLocationId - Delete location by Id - success"),
        @ApiResponse(code = 400, message = "byLocationId - Delete location by Id - failed") })
    @RequestMapping(value = "/location/{locationId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Location> deleteSingleLocation(@ApiParam(value = "ID of the location to delete",required=true) @PathVariable("locationId") Integer locationId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default LocationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    /**
     * GET a list of activities from a specific location. Methods searches
     * by location ID in the pointOfInterest collection to check
     * if the location object exists. Then it searches in the
     * activity collection by location ID and returns a
     * list of activities.
     *
     * Request URI: /location/{locationId}/activity
     * @param locationId - ID of the location
     * @return a list of activities from a specific location and 200 status code if successful, 400 code otherwise
     */
    @ApiOperation(value = "Gets all activities from a specific location.", nickname = "getActivitiesAtLocationById", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Activities_by_LocationId - Get activities by Id - success"),
        @ApiResponse(code = 400, message = "Activities_by_LocationId - Get activities by Id - failed") })
    @RequestMapping(value = "/location/{locationId}/activity",
        method = RequestMethod.GET)
    default ResponseEntity<List<WorkoutActivity>> getActivitiesAtLocationById(@ApiParam(value = "ID of the location to get",required=true) @PathVariable("locationId") Integer locationId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default LocationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    /**
     * GET all locations from the collection.
     *
     * Request URI: /locations
     * @return a list of all location documents
     */
    @ApiOperation(value = "Get record of all locations", nickname = "getAllLocationRecords", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Locations - Get all locations - success"),
        @ApiResponse(code = 400, message = "Locations - Get all locations - failed") })
    @RequestMapping(value = "/location",
        method = RequestMethod.GET)
    default ResponseEntity<List<Location>> getAllLocationRecords() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default LocationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * GET a specific location by searching for its
     * location ID in the collection.
     *
     * Request URI: /locations/{locationId}
     * @param locationId - a given location ID
     * @return a specific location document and 200 status code if it exists, 400 code otherwise
     */
    @ApiOperation(value = "Get a specific location by searching its locationId", nickname = "getSingleLocationById", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "byLocationId - Get location by Id - success"),
        @ApiResponse(code = 400, message = "byLocationId - Get location by Id - failed") })
    @RequestMapping(value = "/location/{locationId}",
        method = RequestMethod.GET)
    default ResponseEntity<Location> getSingleLocationById(@ApiParam(value = "ID of the location to get",required=true) @PathVariable("locationId") Integer locationId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default LocationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * GET a specific location by searching
     * for location name in the collection.
     *
     * Note: GET method is already taken by "/locations/{locationId}" so have
     * to add another keyword "name" in URI to do another search
     *
     * Request URI: /location/name/{locationName}
     * @param locationName - string name of location
     * @return a specific location and 200 status code if it exists, 400 code otherwise
     */
    @ApiOperation(value = "Get a specific location by searching its locationName", nickname = "getSingleLocationById", notes = "", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "byLocationName - Get location by name - success"),
        @ApiResponse(code = 400, message = "byLocationName - Get location by name - failed") })
    @RequestMapping(value = "/location/name/{locationName}",
        method = RequestMethod.GET)
    default ResponseEntity<Location> getSingleLocationByName(@ApiParam(value = "String name of the location to get",required=true) @PathVariable("locationName") String locationName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default LocationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * PATCH a location document by searching for its location ID in the collection
     * then uses a map to tie in the key/value pairs to update the appropriate fields
     * in the resource.
     *
     * For example, if the request body only wants to update the
     * id and name {id: 1, name: "example"} of a location, then it goes through
     * each fields in the pointOfInterest object and finds the key (id and name) and update
     * the value associated with it (1 and "example").
     * Reference: https://stackoverflow.com/questions/45200142/spring-rest-partial-update-with-patch-method
     *
     * Request URI: /location/{locationId}
     * @param locationId - ID of the location
     * @param fieldsToUpdate - hashmap with key/value pairs, key -> field of object and value -> new value to update
     * @return the updated location and 200 status code if successful, 400 code otherwise
     */
    @ApiOperation(value = "Patch/Modify a specific location by searching its locationId", nickname = "patchSingleLocationById", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "byLocationId - Patch/modify location by Id - success"),
        @ApiResponse(code = 400, message = "byLocationId - Patch/modify location by Id - failed") })
    @RequestMapping(value = "/location/{locationId}",
        method = RequestMethod.PATCH)
    default ResponseEntity<Location> patchSingleLocationById(@ApiParam(value = "ID of the location to patch",required=true) @PathVariable("locationId") Integer locationId, @RequestBody Map<String, Object> fieldsToUpdate) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default LocationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * POST an activity with a given location ID. Method finds the location
     * by ID in the location repository and checks to see if both
     * the location and activity resource exists. Then it sets
     * the activity's locID with the given locationID and saves
     * the new activity to the activity collection.
     *
     * Request URI: /location/{locationId}/activity
     * @param locationId - location
     * @param activity - a new activity to add
     * @return the new activity object and 200 status code if successful, 400 code otherwise
     */
    @ApiOperation(value = "Add an activity to a given location", nickname = "postActivityToLocationById", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Activity_by_LocationId - Post location by Id - success"),
        @ApiResponse(code = 400, message = "Activity_by_LocationId - Post location by Id - failed") })
    @RequestMapping(value = "/location/{locationId}/activity",
        method = RequestMethod.POST)
    default ResponseEntity<WorkoutActivity> postActivityToLocationById(@ApiParam(value = "String ID of the location to post",required=true) @PathVariable("locationId") Integer locationId, @RequestBody
        WorkoutActivity activity) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default LocationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * PUT a single location in the collection. Method finds the location
     * by ID then deletes the document and saves the updatedLocation in the collection.
     *
     * Request URI: /location/{locationId}
     * @param locationId - a given location ID to search
     * @param updatedLocation - another location object with updated values
     * @return the original location with new values and 200 status code if successful, 400 code otherwise
     */
    @ApiOperation(value = "Put/Modify a specific location by searching its locationId", nickname = "putSingleLocationById", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "byLocationId - Put/modify location by Id - success"),
        @ApiResponse(code = 400, message = "byLocationId - Put/modify location by Id - failed") })
    @RequestMapping(value = "/location/{locationId}",
        method = RequestMethod.PUT)
    default ResponseEntity<Location> putSingleLocationById(@ApiParam(value = "ID of the location to put",required=true) @PathVariable("locationId") Integer locationId, @RequestBody
            Location updatedLocation) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default LocationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
